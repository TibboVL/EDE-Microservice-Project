server:
  port: 8080

logging:
  level:
    root: INFO
    org.springframework.cloud.gateway: INFO
    org.springframework.cloud.gateway.route.RouteDefinitionRouteLocator: INFO
    reactor.netty: INFO
    org.springframework.security: TRACE

management:
  endpoints:
    web:
      exposure:
        include: "*"


spring:
  security:
    oauth2:
      client:
        registration:
          google:
            #client-id: ${GOOGLE_CLIENTID}
            client-id: 466655062537-ocs19qdjbpdkupnpi0ff86lq3gofngis.apps.googleusercontent.com
            #client-secret: ${GOOGLE_CLIENTSECRET}
            client-secret: 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
            scope: openid,profile,email
      resource-server:
        jwt:
          issuer-uri: https://accounts.google.com
          jwk-set-uri: https://www.googleapis.com/oauth2/v3/certs
  cloud:
    gateway:
      routes:
        # user service
        - id: get all users
          uri: http://${USER_SERVICE_BASEURL:localhost:8081}
          predicates:
            - Path=/user/all
            - Method=GET 
          filters:
            - SetPath=/api/user/all
        - id: add dummy users
          uri: http://${USER_SERVICE_BASEURL:localhost:8081}
          predicates:
            - Path=/user/dummyData
            - Method=GET 
          filters:
            - SetPath=/api/user/dummyData
        - id: get-user
          uri: http://${USER_SERVICE_BASEURL:localhost:8081}
          predicates:
            - Path=/user/{id}
            - Method=GET 
          filters:
            - SetPath=/api/user/{id}
        - id: check if user exists based on OAuthID
          uri: http://${USER_SERVICE_BASEURL:localhost:8081}
          predicates:
            - Path=/user/checkExistence/{id}
            - Method=GET
          filters:
            - SetPath=/api/user/checkExistence/{id}
        - id: create-user
          uri: http://${USER_SERVICE_BASEURL:localhost:8081}
          predicates:
            - Path=/user
            - Method=POST 
          filters:
            - SetPath=/api/user
        - id: update-user
          uri: http://${USER_SERVICE_BASEURL:localhost:8081}
          predicates:
            - Path=/user/{id}
            - Method=PUT 
          filters:
            - SetPath=/api/user/{id}
        - id: delete-user
          uri: http://${USER_SERVICE_BASEURL:localhost:8081}
          predicates:
            - Path=/user/{id}
            - Method=DELETE 
          filters:
            - SetPath=/api/user/{id}

        # library service
        - id: get all songs
          uri: http://${LIBRARY_SERVICE_BASEURL:localhost:8082}
          predicates:
            - Path=/song/all
            - Method=GET 
          filters:
            - SetPath=/api/library/song/all
        - id: get a chosen amount of songs
          uri: http://${LIBRARY_SERVICE_BASEURL:localhost:8082}
          predicates:
            - Path=/song/top/{count}
            - Method=GET
          filters:
            - SetPath=/api/library/song/top/{count}
        - id: add dummy songs
          uri: http://${LIBRARY_SERVICE_BASEURL:localhost:8082}
          predicates:
            - Path=/song/dummyData
            - Method=GET 
          filters:
            - SetPath=/api/library/song/dummyData
        - id: get-song
          uri: http://${LIBRARY_SERVICE_BASEURL:localhost:8082}
          predicates:
            - Path=/song/{id}
            - Method=GET 
          filters:
            - SetPath=/api/library/song/{id}
        - id: create-song
          uri: http://${LIBRARY_SERVICE_BASEURL:localhost:8082}
          predicates:
            - Path=/song
            - Method=POST 
          filters:
            - SetPath=/api/library/song
        - id: update-song
          uri: http://${LIBRARY_SERVICE_BASEURL:localhost:8082}
          predicates:
            - Path=/song/{id}
            - Method=PUT 
          filters:
            - SetPath=/api/library/song/{id}
        - id: delete-song
          uri: http://${LIBRARY_SERVICE_BASEURL:localhost:8082}
          predicates:
            - Path=/song/{id}
            - Method=DELETE
          filters:
            - SetPath=/api/library/song/{id}

        # playlist service
        - id: get-playlist
          uri: http://${PLAYLIST_SERVICE_BASEURL:localhost:8083}
          predicates:
            - Path=/playlist/{id}
            - Method=GET 
          filters:
            - SetPath=/api/playlist/{id}
        - id: add my favorites playlist
          uri: http://${PLAYLIST_SERVICE_BASEURL:localhost:8083}
          predicates:
            - Path=/playlist/{id}
            - Method=POST 
          filters:
            - SetPath=/api/playlist/{id}
        - id: get a users playlists
          uri: http://${PLAYLIST_SERVICE_BASEURL:localhost:8083}
          predicates:
            - Path=/playlist/user/{id}
            - Method=GET
          filters:
            - SetPath=/api/playlist/user/{id}
        - id: create-playlist
          uri: http://${PLAYLIST_SERVICE_BASEURL:localhost:8083}
          predicates:
            - Path=/playlist
            - Method=POST 
          filters:
            - SetPath=/api/playlist
        - id: update-playlist
          uri: http://${PLAYLIST_SERVICE_BASEURL:localhost:8083}
          predicates:
            - Path=/playlist/{id}
            - Method=PUT 
          filters:
            - SetPath=/api/playlist/{id}
        - id: delete-playlist
          uri: http://${PLAYLIST_SERVICE_BASEURL:localhost:8083}
          predicates:
            - Path=/playlist/{id}
            - Method=DELETE 
          filters:
            - SetPath=/api/playlist/{id}

        - id: add song to playlist
          uri: http://${PLAYLIST_SERVICE_BASEURL:localhost:8083}
          predicates:
            - Path=/playlist/{playlistId}/{songId}
            - Method=PUT 
          filters:
            - SetPath=/api/playlist/{playlistId}/{songId}
        - id: remove song from playlist
          uri: http://${PLAYLIST_SERVICE_BASEURL:localhost:8083}
          predicates:
            - Path=/playlist/{playlistId}/{songId}
            - Method=DELETE 
          filters:
            - SetPath=/api/playlist/{playlistId}/{songId}

        # Rating service
        - id: get all ratings
          uri: http://${RATING_SERVICE_BASEURL:localhost:8084}
          predicates:
            - Path=/rating/all
            - Method=GET
          filters:
            - SetPath=/api/rating/all
        - id: get-rating
          uri: http://${RATING_SERVICE_BASEURL:localhost:8084}
          predicates:
            - Path=/rating/{id}
            - Method=GET
          filters:
            - SetPath=/api/rating/{id}
        - id: create-rating
          uri: http://${RATING_SERVICE_BASEURL:localhost:8084}
          predicates:
            - Path=/rating
            - Method=POST
          filters:
            - SetPath=/api/rating
        - id: update-rating
          uri: http://${RATING_SERVICE_BASEURL:localhost:8084}
          predicates:
            - Path=/rating/{id}
            - Method=PUT
          filters:
            - SetPath=/api/rating/{id}
        - id: delete-rating
          uri: http://${RATING_SERVICE_BASEURL:localhost:8084}
          predicates:
            - Path=/rating/{id}
            - Method=DELETE
          filters:
            - SetPath=/api/rating/{id}